library(ROCR)
library(stringr)
library(RVAideMemoire)
#install.packages("plotly")
library(plotly)
install.packages('TSstudio')
library(TSstudio)
install.packages("TSstudio")
install.packages("TSstudio")
install.packages("TSstudio")
library(ggplot2)
library(tswge)
library(ggplot2)
library(ggthemes)
library(forecast)
library(tseries)
library(lubridate)
library(datetime)
library(caret)
library(corrplot)
library(DMwR)
library(Hmisc)
library(ROCR)
library(stringr)
library(RVAideMemoire)
#install.packages("plotly")
library(plotly)
install.packages("rlang")
install.packages("rlang")
library(ggplot2)
library(tswge)
library(ggplot2)
library(ggthemes)
library(forecast)
library(tseries)
library(lubridate)
library(datetime)
library(caret)
library(corrplot)
library(DMwR)
library(Hmisc)
library(ROCR)
library(stringr)
library(RVAideMemoire)
#install.packages("plotly")
library(plotly)
library(ggplot2)
library(tswge)
library(ggplot2)
library(ggthemes)
library(forecast)
library(tseries)
library(lubridate)
library(datetime)
library(caret)
library(corrplot)
library(DMwR)
library(Hmisc)
library(ROCR)
library(stringr)
library(RVAideMemoire)
#install.packages("plotly")
library(plotly)
#install.packages('TSstudio')
library(TSstudio)
library(doParallel)
registerDoParallel(cores=16)
library(nnfor)
library(vars)
getwd()
#fluDf = read.csv(file.choose(),header = TRUE)
#fluDf = read.csv("/Volumes/Dhyan-MacPC/Education/SMU /MSDS/DS 7333 Quantifying the World/Unit 8 - Case Study/flu_tidy.csv")
fluDf = read.csv("https://raw.githubusercontent.com/dhyanshah/MS7333_QTW/master/Case8/flu_tidy.csv")
head(fluDf)
dim(fluDf)
summary(fluDf)
fig1 <- plot_ly(fluDf, x = ~Positive, y = ~week.year, name = "Positive", type = 'scatter',
mode = "markers", marker = list(color = "pink"))
fig1 <- fig1 %>% add_trace(x = ~Negative, y = ~week.year, name = "Negative",type = 'scatter',
mode = "markers", marker = list(color = "blue"))
fig1 <- fig1 %>% layout(
title = "Flu Cases",
xaxis = list(title = "Number of Cases"),
margin = list(l = 100)
)
fig1
fig2 <- plot_ly(fluDf, x = ~Positive, y = ~year, name = "Positive", type = 'scatter',
mode = "markers", marker = list(color = "pink"))
fig2 <- fig2 %>% add_trace(x = ~Negative, y = ~year, name = "Negative",type = 'scatter',
mode = "markers", marker = list(color = "blue"))
fig2 <- fig2 %>% layout(
title = "Flu Cases",
xaxis = list(title = "Number of Cases"),
margin = list(l = 100)
)
fig2
fig3 <- plot_ly(data = fluDf, x = ~Positive, y = ~Negative,
marker = list(size = 10,
color = ~year,
line = list(color = ~year,
width = 2)))
fig3 <- fig3 %>% layout(title = 'Flu Cases',
yaxis = list(zeroline = FALSE),
xaxis = list(zeroline = FALSE))
fig3
fig4 <- plot_ly(fluDf, x = ~year, y = ~Positive, type = 'bar', name = 'Positive')
fig4 <- fig4 %>% add_trace(y = ~Negative, name = 'Negative')
fig4 <- fig4 %>% layout(yaxis = list(title = 'Count'), barmode = 'stack')
fig4
fig5 <- plot_ly(fluDf, x = ~week, y = ~Positive, type = 'bar', name = 'Positive')
fig5 <- fig5 %>% add_trace(y = ~Negative, name = 'Negative')
fig5 <- fig5 %>% layout(yaxis = list(title = 'Count'), barmode = 'stack')
fig5
fig6 <- plot_ly(
type = "scatter",
x = fluDf$year,
y = fluDf$Positive,
name = 'Positive FLu Cases',
mode = "markers",
)
fig6 <- fig6 %>%
layout(
title = "Flu Cases",
xaxis = list(
type = "Year"
)
)
fig6
#all data
plotts.wge(fluDf$Positive)
plotts.wge(fluDf$Negative)
plotts.sample.wge(fluDf$Positive)
plotts.sample.wge(fluDf$Negative)
#truncated to last year
plotts.sample.wge(fluDf$Positive[0:100])
plotts.sample.wge(fluDf$Positive[100:175])
#truncated to 6 months
plotts.sample.wge(fluDf$Negative[0:100])
plotts.sample.wge(fluDf$Negative[100:175])
length(fluDf$Positive[1:100])
length(fluDf$Negative[1:100])
acf(fluDf$Positive[1:100])
acf(fluDf$Negative[1:100])
aic5.wge(fluDf$Positive,p=0:15,q=0:12,type = 'bic')
#Five Smallest Values of  bic
#p    q        bic
#92     7    0   14.30477
#32     2    5   14.31919
#105    8    0   14.33046
#80     6    1   14.33107
#93     7    1   14.33112
aic5.wge(fluDf$Positive,p=0:15,q=0:12,type = 'aic')
#Five Smallest Values of  aic
#p    q        aic
#92     7    0   14.16232
#34     2    7   14.16889
#105    8    0   14.17020
#93     7    1   14.17086
#32     2    5   14.17674
aic5.wge(fluDf$Negative,p=0:12,q=0:12,type = 'bic')
#Five Smallest Values of  bic
#p    q        bic
#27    2    0   15.92028
#28    2    1   15.94886
#40    3    0   15.94888
#16    1    2   15.96290
#79    6    0   15.96787
aic5.wge(fluDf$Negative,p=0:12,q=0:12,type = 'aic')
#Five Smallest Values of  aic
#p    q        aic
#84     6    5   15.78323
#157   12    0   15.81752
#86     6    7   15.81909
#158   12    1   15.82814
#144   11    0   15.83928
e1 = est.arma.wge(fluDf$Positive, p=7, q=0)
e1
mean(fluDf$Positive)
e2 = est.arma.wge(fluDf$Negative, p=6, q=5)
e2
mean(fluDf$Positive)
## Positive ##
s1 = artrans.wge(fluDf$Positive, c(rep(0,11),1))
parzen.wge(s1)
aic5.wge(s1)
plotts.sample.wge(s1)
s2 = artrans.wge(fluDf$Positive, c(rep(0,51),1))
parzen.wge(s2)
aic5.wge(s2)
plotts.sample.wge(s2)
## Negative ##
s3 = artrans.wge(fluDf$Negative, c(rep(0,11),1))
parzen.wge(s3)
aic5.wge(s3)
plotts.sample.wge(s3)
s3 = artrans.wge(fluDf$Negative, c(rep(0,51),1))
parzen.wge(s3)
aic5.wge(s3)
plotts.sample.wge(s3)
f1 = fore.aruma.wge(fluDf$Positive, phi = c(1.76405274, -0.88142813, -0.06765031,  0.17643910,  0.37028688, -0.65347541,  0.23814701),  s=52, n.ahead = 45, lastn = TRUE)
ase1 = mean(((f1$f-fluDf$Positive[135:179])))
ase1
f2 = fore.aruma.wge(fluDf$Negative, phi = c(1.8428774, -0.8968270, -0.6407014,  1.5967127, -1.0525593,  0.1229353), theta = c(0.45129414,  0.24224825, -0.53596162,  0.75762713,  0.08476119), s=52, n.ahead = 45, lastn = TRUE)
ase2 = mean(((f2$f-fluDf$Negative[135:179])))
ase2
f1 = fore.aruma.wge(fluDf$Positive, phi = c(1.76405274, -0.88142813, -0.06765031,  0.17643910,  0.37028688, -0.65347541,  0.23814701), s=26, n.ahead = 13, lastn = TRUE)
ase1 = mean(((f1$f-fluDf$Positive[154:179])))
ase1
f2 = fore.aruma.wge(fluDf$Negative, phi = c(1.8428774, -0.8968270, -0.6407014,  1.5967127, -1.0525593,  0.1229353), theta = c(0.45129414,  0.24224825, -0.53596162,  0.75762713,  0.08476119), s=26, n.ahead = 13, lastn = TRUE)
ase2 = mean(((f2$f-fluDf$Negative[154:179])))
ase2
be1 = est.ar.wge(fluDf$Positive, p=7, type = 'burg')
be1
mean(fluDf$Positive)
#be2 = est.arma.wge(fluDf$Negative, p=6, q=5, type = 'burg')
#be2
#mean(fluDf$Positive)
bf1 = fore.aruma.wge(fluDf$Positive, phi = c(1.76613344, -0.88202450, -0.06256226, 0.16666095, 0.38071794, -0.66334254,  0.24216554),  s=52, n.ahead = 45, lastn = TRUE)
base1 = mean(((bf1$f-fluDf$Positive[135:179])))
base1
bf1 = fore.aruma.wge(fluDf$Positive, phi = c(1.76613344, -0.88202450, -0.06256226, 0.16666095, 0.38071794, -0.66334254,  0.24216554), s=26, n.ahead = 13, lastn = TRUE)
base2 = mean(((bf1$f-fluDf$Positive[154:179])))
base2
bje1 = est.ar.wge(fluDf$Positive, p=7, type = 'yw')
bje1
mean(fluDf$Positive)
bjf1 = fore.aruma.wge(fluDf$Positive, phi = bje1$phi,  s=52, n.ahead = 45, lastn = TRUE)
bjase1 = mean(((bjf1$f-fluDf$Positive[135:179])))
bjase1
bjf2 = fore.aruma.wge(fluDf$Positive, phi = bje1$phi, s=26, n.ahead = 13, lastn = TRUE)
bjase2 = mean(((bjf2$f-fluDf$Positive[154:179])))
bjase2
bjase1
bjase2
flu_train = ts(fluDf$Positive[1:153], start = c(2017,1),frequency = 52)
nonflu_train = ts(fluDf$Negative[1:153], start = c(2017,1),frequency = 52)
flu_test = ts(fluDf$Positive[154:179], start = c(2019,49),frequency = 52)
nonflu_test = ts(fluDf$Negative[154:179], start = c(2019,49),frequency = 52)
set.seed(255)
fit.mlp= mlp(flu_train, lags=1:52, hd.auto.type="valid", hd.max=20, reps=500)
fit.mlp
plot(fit.mlp)
h=26
frc <- forecast(fit.mlp,h=h)
plot(frc)
frc
ASE.mlp = mean((flu_test-frc$mean)^2)
ASE.mlp
bjase3 = mean(((frc$mean-flu_test)))
bjase3
# Plotting Forecast vs actual for MLP
plot(flu_tidy$Positive, type = "l",
main='Flu Rates',
xlab="Week"
,ylab="Cases")
lines(seq(153,178,1),frc$mean,col = "blue")
#axis(1, at=1:37, labels=seq(1936,1972,1),las=2)
legend(26, 3, legend=c("MLP Forecast", 'Actual'),
col=c("green", 'black'), lty=1, cex=0.9)
flu_train = ts(fluDf$Positive[1:153], start = c(2017,1),frequency = 52)
nonflu_train = ts(fluDf$Negative[1:153], start = c(2017,1),frequency = 52)
flu_test = ts(fluDf$Positive[154:179], start = c(2019,49),frequency = 52)
nonflu_test = ts(fluDf$Negative[154:179], start = c(2019,49),frequency = 52)
set.seed(255)
fit.mlp= mlp(flu_train, lags=1:52, hd.auto.type="cv", hd.max=20, reps=500)
fit.mlp
plot(fit.mlp)
h=26
frc <- forecast(fit.mlp,h=h)
plot(frc)
frc
ASE.mlp = mean((flu_test-frc$mean)^2)
ASE.mlp
bjase3 = mean(((frc$mean-flu_test)))
bjase3
# Plotting Forecast vs actual for MLP
plot(flu_tidy$Positive, type = "l",
main='Flu Rates',
xlab="Week"
,ylab="Cases")
lines(seq(153,178,1),frc$mean,col = "blue")
#axis(1, at=1:37, labels=seq(1936,1972,1),las=2)
legend(26, 3, legend=c("MLP Forecast", 'Actual'),
col=c("green", 'black'), lty=1, cex=0.9)
fit <- elm(flu_train)
if (!require("thief")){install.packages("thief")}
library(thief)
fit <- elm(flu_train,forecastfunction=mlp.thief)
if (!require("thief")){install.packages("thief")}
library(thief)
fit <- theif(flu_train,forecastfunction=elm.thief)
if (!require("thief")){install.packages("thief")}
library(thief)
fit <- thief(flu_train,forecastfunction=elm.thief)
if (!require("thief")){install.packages("thief")}
library(thief)
fit <- thief(flu_train,forecastfunction=elm.thief)
if (!require("thief")){install.packages("thief")}
library(thief)
fit <- thief(flu_train,forecastfunction=mlp.thief)
if (!require("thief")){install.packages("thief")}
library(thief)
fit <- thief(flu_train,m=52, h=26, forecastfunction=mlp.thief)
if (!require("thief")){install.packages("thief")}
library(thief)
fit <- thief(flu_train,m=52, h=26)
if (!require("thief")){install.packages("thief")}
library(thief)
fit <- thief(flu_train, h=26)
if (!require("thief")){install.packages("thief")}
library(thief)
fit <- thief(flu_train, h=24)
if (!require("thief")){install.packages("thief")}
library(thief)
fit <- thief(flu_train)
if (!require("thief")){install.packages("thief")}
library(thief)
fit <- elm(flu_train)
if (!require("thief")){install.packages("thief")}
library(thief)
fit <- elm(flu_train, m=52)
if (!require("thief")){install.packages("thief")}
library(thief)
fit <- elm(flu_train, m=52, difforder=c(1,52))
fit <- elm(flu_train, m=52, difforder=c(1,52))
plot(fit)
fit <- elm(flu_train, m=52, difforder=c(1,52))
print(fit)
plot(fit)
fit <- elm(flu_train, m=52, difforder=c(1,52))
print(fit)
plot(fit)
forecast(fit,h=26)
fit <- elm(flu_train, m=52, difforder=c(1,52))
print(fit)
plot(fit)
frc<-forecast(fit,h=26)
bjase4 = mean(((frc$mean-flu_test)))
bjase4
fit <- elm(flu_train, m=52, difforder=c(1,52))
print(fit)
plot(fit)
frc<-forecast(fit,h=26)
bjase4 = mean(((frc$mean-flu_test)))
bjase4
# Plotting Forecast vs actual for ELM
plot(flu_tidy$Positive, type = "l",
main='Flu Rates',
xlab="Week"
,ylab="Cases")
lines(seq(153,178,1),frc$mean,col = "blue")
#axis(1, at=1:37, labels=seq(1936,1972,1),las=2)
legend(26, 3, legend=c("MLP Forecast", 'Actual'),
col=c("green", 'black'), lty=1, cex=0.9)
fit <- elm(flu_train, m=52, difforder=c(1,52), reps=500,
type = c("lasso", "ridge", "step", "lm"), output=TRUE)
fit <- elm(flu_train, m=52, difforder=c(1,52), reps=500,
type = c("lasso", "ridge", "step", "lm"), output=c(TRUE))
fit <- elm(flu_train, m=52, difforder=c(1,52), reps=500,
type = c("lasso", "ridge", "step", "lm"))
print(fit)
plot(fit)
frc<-forecast(fit,h=26)
bjase4 = mean(((frc$mean-flu_test)))
bjase4
# Plotting Forecast vs actual for ELM
plot(flu_tidy$Positive, type = "l",
main='Flu Rates',
xlab="Week"
,ylab="Cases")
lines(seq(153,178,1),frc$mean,col = "blue")
#axis(1, at=1:37, labels=seq(1936,1972,1),las=2)
legend(26, 3, legend=c("MLP Forecast", 'Actual'),
col=c("green", 'black'), lty=1, cex=0.9)
fit <- elm(flu_train, m=52, difforder=c(1,52), reps=1000, type = c("lasso", "ridge", "step", "lm"))
fit <- elm(flu_train, m=52, difforder=c(1,52), comb= "mean", reps=1000, type = c("lasso", "ridge", "step", "lm"))
print(fit)
plot(fit)
frc<-forecast(fit,h=26)
bjase4 = mean(((frc$mean-flu_test)))
bjase4
# Plotting Forecast vs actual for ELM
plot(flu_tidy$Positive, type = "l",
main='Flu Rates',
xlab="Week"
,ylab="Cases")
lines(seq(153,178,1),frc$mean,col = "blue")
#axis(1, at=1:37, labels=seq(1936,1972,1),las=2)
legend(26, 3, legend=c("MLP Forecast", 'Actual'),
col=c("green", 'black'), lty=1, cex=0.9)
for( i in 1:(159-(trainingSize + horizon) + 1))
# Rolling Window ASE Example: Amtrack
# This idea is to calculate many ASEs and take there average by using a smaller training set and forecasting the last 'n' many times.
amtrak = read.csv(file.choose(),header = TRUE)
#Model 1
phis = c(0.5511, 0.1680, -0.0145, 0.0651, 0.1388, -0.2966, 0.1539, 0.1270, -0.1815, 0.0364, 0.1456, 0.6287, -0.3832, -0.0199, -0.1679)
thetas = 0
s  = 0
d  = 0
#Model 2
phis = c(-0.02709541,  0.74213105)
thetas = c(-0.5844596,  0.3836931)
s = 12
d = 0
#Model 3
phis = 0.306943
thetas = 0.7431719
s = 12
d = 1
trainingSize = 70
horizon = 12
ASEHolder = numeric()
for( i in 1:(159-(trainingSize + horizon) + 1))
{
forecasts = fore.aruma.wge(amtrak$Ridership[i:(i+(trainingSize-1))],phi = phis, theta = thetas, s = s, d = d,n.ahead = horizon)
ASE = mean((amtrak$Ridership[(trainingSize+i):(trainingSize+ i + (horizon) - 1)] - forecasts$f)^2)
ASEHolder[i] = ASE
}
ASEHolder
hist(ASEHolder)
WindowedASE = mean(ASEHolder)
summary(ASEHolder)
WindowedASE
# Visualization
i = 78
fs = fore.aruma.wge(amtrak$Ridership[i:(i+(trainingSize+horizon)-1)],phi = phis, theta = thetas, s = s, d = d,n.ahead = 12, lastn = TRUE)
ASE = mean((amtrak$Ridership[(i+trainingSize):(i+(trainingSize+horizon)-1)] - fs$f )^2)
ASE
###########################
##Ensemble MLP
###########################
trainingSize = 153
horizon = 26
ASEHolder = numeric()
for( i in 1:(179-(trainingSize + horizon) + 1))
{
forecasts_MLP = forecastmlp(flu_train[i:(i+(trainingSize-1)), 1], lags=1:52, hd.auto.type="cv", hd.max=20, reps=500)
forecasts_ELM =  forecast(elm(flu_train[i:(i+(trainingSize-1)), 1], m=52, difforder=c(1,52), comb= "mean", reps=500, type = c("lasso", "ridge", "step", "lm")))
ensemble = (forecasts_ELM$mean + forecasts_ELM$mean)/2
ASE = mean ((flu_train[(trainingSize+i):(trainingSize+ i + (horizon) - 1)] - ensemble)^2)
ASEHolder[i] = ASE
}
###########################
##Ensemble MLP
###########################
trainingSize = 153
horizon = 26
ASEHolder = numeric()
for( i in 1:(179-(trainingSize + horizon) + 1))
{
forecasts_MLP = forecast(mlp(flu_train[i:(i+(trainingSize-1)), 1], lags=1:52, hd.auto.type="cv", hd.max=20, reps=500))
forecasts_ELM =  forecast(elm(flu_train[i:(i+(trainingSize-1)), 1], m=52, difforder=c(1,52), comb= "mean", reps=500, type = c("lasso", "ridge", "step", "lm")))
ensemble = (forecasts_ELM$mean + forecasts_ELM$mean)/2
ASE = mean ((flu_train[(trainingSize+i):(trainingSize+ i + (horizon) - 1)] - ensemble)^2)
ASEHolder[i] = ASE
}
flu_train[1:(1+(trainingSize-1)), 1]
flu_train[1:(1+(153-1)), 1]
flu_train[1:(1+(153-1))]
###########################
##Ensemble MLP
###########################
trainingSize = 153
horizon = 26
ASEHolder = numeric()
for( i in 1:(179-(trainingSize + horizon) + 1))
{
forecasts_MLP = forecast(mlp(flu_train[i:(i+(trainingSize-1))], lags=1:52, hd.auto.type="cv", hd.max=20, reps=500))
forecasts_ELM =  forecast(elm(flu_train[i:(i+(trainingSize-1))], m=52, difforder=c(1,52), comb= "mean", reps=500, type = c("lasso", "ridge", "step", "lm")))
ensemble = (forecasts_ELM$mean + forecasts_ELM$mean)/2
ASE = mean ((flu_train[(trainingSize+i):(trainingSize+ i + (horizon) - 1)] - ensemble)^2)
ASEHolder[i] = ASE
}
###########################
##Ensemble MLP
###########################
trainingSize = 153
horizon = 26
ASEHolder = numeric()
flu_train = ts(fluDf$Positive[1:153], start = c(2017,1),frequency = 52)
for( i in 1:(179-(trainingSize + horizon) + 1))
{
forecasts_MLP = forecast(mlp(flu_train[i:(i+(trainingSize-1))], lags=1:52, hd.auto.type="cv", hd.max=20, reps=500))
forecasts_ELM =  forecast(elm(flu_train[i:(i+(trainingSize-1))], m=52, difforder=c(1,52), comb= "mean", reps=500, type = c("lasso", "ridge", "step", "lm")))
ensemble = (forecasts_ELM$mean + forecasts_ELM$mean)/2
ASE = mean ((flu_train[(trainingSize+i):(trainingSize+ i + (horizon) - 1)] - ensemble)^2)
ASEHolder[i] = ASE
}
###########################
##Ensemble MLP
###########################
trainingSize = 153
horizon = 26
ASEHolder = numeric()
flu_train = ts(fluDf$Positive[1:153], start = c(2017,1),frequency = 52)
for( i in 1:(179-(trainingSize + horizon) + 1))
{
forecasts_MLP = forecast(mlp(flu_train[i:(i+(trainingSize-1))], lags=1:52, hd.auto.type="cv", hd.max=20))
forecasts_ELM =  forecast(elm(flu_train[i:(i+(trainingSize-1))], m=52, difforder=c(1,52), comb= "mean", type = c("lasso", "ridge", "step", "lm")))
ensemble = (forecasts_ELM$mean + forecasts_ELM$mean)/2
ASE = mean ((flu_train[(trainingSize+i):(trainingSize+ i + (horizon) - 1)] - ensemble)^2)
ASEHolder[i] = ASE
}
mlp(flu_train[i:(i+(trainingSize-1))], lags=1:52, hd.auto.type="cv", hd.max=20)
mlp(flu_train[1:130], lags=1:52, hd.auto.type="cv", hd.max=20)
mlp(flu_train[1:130, 1], lags=1:52, hd.auto.type="cv", hd.max=20)
flu_train
flu_train$x
flu_train
mlp(flu_train, lags=1:52, hd.auto.type="cv", hd.max=20)
mlp(flu_train[1:50], lags=1:52, hd.auto.type="cv", hd.max=20)
mlp(ts(flu_train[1:50]), lags=1:52, hd.auto.type="cv", hd.max=20)
