fit <- elm(flu_train,difforder=c(1,52), comb= "mean", reps=1000, type = c("lasso", "ridge", "step", "lm"))
print(fit)
plot(fit)
frc<-forecast(fit,h=26)
frc$f <- frc$mean
frc$f[frc$f<0] <- 0
ase_elm = ase(fluDf$Positive, frc)
#ase_elm
library(ggplot2)
library(tswge)
library(ggplot2)
library(ggthemes)
library(forecast)
library(tseries)
library(lubridate)
library(datetime)
library(caret)
library(corrplot)
library(DMwR)
library(Hmisc)
library(ROCR)
library(stringr)
library(RVAideMemoire)
#install.packages("plotly")
library(plotly)
#install.packages('TSstudio')
library(TSstudio)
library(doParallel)
registerDoParallel(cores=16)
library(nnfor)
library(vars)
ase <- function(x, xhat){
s <- length(x) - length(xhat$f) + 1
n <- length(x)
mean((xhat$f-x[s:n])^2)
}
getwd()
#fluDf = read.csv(file.choose(),header = TRUE)
#fluDf = read.csv("/Volumes/Dhyan-MacPC/Education/SMU /MSDS/DS 7333 Quantifying the World/Unit 8 - Case Study/flu_tidy.csv")
fluDf = read.csv("https://raw.githubusercontent.com/dhyanshah/MS7333_QTW/master/Case8/flu_tidy.csv")
head(fluDf)
dim(fluDf)
summary(fluDf)
fig1 <- plot_ly(fluDf, x = ~Positive, y = ~week.year, name = "Positive", type = 'scatter',
mode = "markers", marker = list(color = "pink"))
fig1 <- fig1 %>% add_trace(x = ~Negative, y = ~week.year, name = "Negative",type = 'scatter',
mode = "markers", marker = list(color = "blue"))
fig1 <- fig1 %>% layout(
title = "Flu Cases",
xaxis = list(title = "Number of Cases"),
margin = list(l = 100)
)
fig1
fig2 <- plot_ly(fluDf, x = ~Positive, y = ~year, name = "Positive", type = 'scatter',
mode = "markers", marker = list(color = "pink"))
fig2 <- fig2 %>% add_trace(x = ~Negative, y = ~year, name = "Negative",type = 'scatter',
mode = "markers", marker = list(color = "blue"))
fig2 <- fig2 %>% layout(
title = "Flu Cases",
xaxis = list(title = "Number of Cases"),
margin = list(l = 100)
)
fig2
fig3 <- plot_ly(data = fluDf, x = ~Positive, y = ~Negative,
marker = list(size = 10,
color = ~year,
line = list(color = ~year,
width = 2)))
fig3 <- fig3 %>% layout(title = 'Flu Cases',
yaxis = list(zeroline = FALSE),
xaxis = list(zeroline = FALSE))
fig3
fig4 <- plot_ly(fluDf, x = ~year, y = ~Positive, type = 'bar', name = 'Positive')
fig4 <- fig4 %>% add_trace(y = ~Negative, name = 'Negative')
fig4 <- fig4 %>% layout(yaxis = list(title = 'Count'), barmode = 'stack')
fig4
fig5 <- plot_ly(fluDf, x = ~week, y = ~Positive, type = 'bar', name = 'Positive')
fig5 <- fig5 %>% add_trace(y = ~Negative, name = 'Negative')
fig5 <- fig5 %>% layout(yaxis = list(title = 'Count'), barmode = 'stack')
fig5
fig6 <- plot_ly(
type = "scatter",
x = fluDf$year,
y = fluDf$Positive,
name = 'Positive FLu Cases',
mode = "markers",
)
fig6 <- fig6 %>%
layout(
title = "Flu Cases",
xaxis = list(
type = "Year"
)
)
fig6
#all data
plotts.wge(fluDf$Positive)
plotts.wge(fluDf$Negative)
plotts.sample.wge(fluDf$Positive)
plotts.sample.wge(fluDf$Negative)
#truncated to last year
plotts.sample.wge(fluDf$Positive[0:100])
plotts.sample.wge(fluDf$Positive[100:175])
#truncated to 6 months
plotts.sample.wge(fluDf$Negative[0:100])
plotts.sample.wge(fluDf$Negative[100:175])
length(fluDf$Positive[1:100])
length(fluDf$Negative[1:100])
acf(fluDf$Positive[1:100])
acf(fluDf$Negative[1:100])
e1 = est.arma.wge(fluDf$Positive, p=7, q=0)
e1
mean(fluDf$Positive)
e2 = est.arma.wge(fluDf$Negative, p=6, q=5)
e2
mean(fluDf$Positive)
## Positive ##
s1 = artrans.wge(fluDf$Positive, c(rep(0,1),1))
parzen.wge(s1)
aic5.wge(s1)
plotts.sample.wge(s1)
s2 = artrans.wge(fluDf$Positive, c(rep(0,51),1))
parzen.wge(s2)
aic5.wge(s2)
plotts.sample.wge(s2)
## Negative ##
s3 = artrans.wge(fluDf$Negative, c(rep(0,1),1))
parzen.wge(s3)
aic5.wge(s3)
plotts.sample.wge(s3)
s3 = artrans.wge(fluDf$Negative, c(rep(0,51),1))
parzen.wge(s3)
aic5.wge(s3)
plotts.sample.wge(s3)
## Positive ##
s1 = artrans.wge(fluDf$Positive, c(rep(0,1),1))
parzen.wge(s1)
aic5.wge(s1)
plotts.sample.wge(s1)
s2 = artrans.wge(s1, c(rep(0,51),1))
parzen.wge(s2)
aic5.wge(s2)
plotts.sample.wge(s2)
## Negative ##
s3 = artrans.wge(fluDf$Negative, c(rep(0,1),1))
parzen.wge(s3)
aic5.wge(s3)
plotts.sample.wge(s3)
s3 = artrans.wge(s3, c(rep(0,51),1))
parzen.wge(s3)
aic5.wge(s3)
plotts.sample.wge(s3)
## Positive ##
s1 = artrans.wge(fluDf$Positive, c(rep(0,1),1))
parzen.wge(s1)
aic5.wge(s1)
plotts.sample.wge(s1)
s2 = artrans.wge(s1, c(rep(0,51),1))
parzen.wge(s2)
aic5.wge(s2)
plotts.sample.wge(s2)
## Negative ##
s3 = artrans.wge(fluDf$Negative, c(rep(0,1),1))
parzen.wge(s3)
aic5.wge(s3)
plotts.sample.wge(s3)
s4 = artrans.wge(s3, c(rep(0,51),1))
parzen.wge(s4)
aic5.wge(s4)
plotts.sample.wge(s4)
f1 = fore.aruma.wge(s2, phi = c(1.76405274, -0.88142813, -0.06765031,  0.17643910,  0.37028688, -0.65347541,  0.23814701),  s=52, n.ahead = 45, lastn = TRUE)
#ase1 = mean(((f1$f-fluDf$Positive[135:179])))
#ase1
ase1 = ase(fluDf$Positive, f1)
f1_neg = fore.aruma.wge(fluDf$Negative, phi = c(1.8428774, -0.8968270, -0.6407014,  1.5967127, -1.0525593,  0.1229353), theta = c(0.45129414,  0.24224825, -0.53596162,  0.75762713,  0.08476119), s=52, n.ahead = 45, lastn = TRUE)
#ase2 = mean(((f2$f-fluDf$Negative[135:179])))
ase2 = ase(fluDf$Negative, f1_neg)
f2 = fore.aruma.wge(fluDf$Positive, phi = c(1.76405274, -0.88142813, -0.06765031,  0.17643910,  0.37028688, -0.65347541,  0.23814701), s=26, n.ahead = 13, lastn = TRUE)
#ase1 = mean(((f1$f-fluDf$Positive[154:179])))
ase3 = ase(fluDf$Positive, f2)
f2_neg = fore.aruma.wge(fluDf$Negative, phi = c(1.8428774, -0.8968270, -0.6407014,  1.5967127, -1.0525593,  0.1229353), theta = c(0.45129414,  0.24224825, -0.53596162,  0.75762713,  0.08476119), s=26, n.ahead = 13, lastn = TRUE)
#ase1 = mean(((f2$f-fluDf$Negative[154:179])))
ase4 = ase(fluDf$Negative, f2_neg)
f1 = fore.aruma.wge(fluDf$Positive, phi = c(1.76405274, -0.88142813, -0.06765031,  0.17643910,  0.37028688, -0.65347541,  0.23814701),  s=52, n.ahead = 45, lastn = TRUE)
#ase1 = mean(((f1$f-fluDf$Positive[135:179])))
#ase1
ase1 = ase(fluDf$Positive, f1)
f1_neg = fore.aruma.wge(fluDf$Negative, phi = c(1.8428774, -0.8968270, -0.6407014,  1.5967127, -1.0525593,  0.1229353), theta = c(0.45129414,  0.24224825, -0.53596162,  0.75762713,  0.08476119), s=52, n.ahead = 45, lastn = TRUE)
#ase2 = mean(((f2$f-fluDf$Negative[135:179])))
ase2 = ase(fluDf$Negative, f1_neg)
f2 = fore.aruma.wge(fluDf$Positive, phi = c(1.76405274, -0.88142813, -0.06765031,  0.17643910,  0.37028688, -0.65347541,  0.23814701), s=26, n.ahead = 13, lastn = TRUE)
#ase1 = mean(((f1$f-fluDf$Positive[154:179])))
ase3 = ase(fluDf$Positive, f2)
f2_neg = fore.aruma.wge(fluDf$Negative, phi = c(1.8428774, -0.8968270, -0.6407014,  1.5967127, -1.0525593,  0.1229353), theta = c(0.45129414,  0.24224825, -0.53596162,  0.75762713,  0.08476119), s=26, n.ahead = 13, lastn = TRUE)
#ase1 = mean(((f2$f-fluDf$Negative[154:179])))
ase4 = ase(fluDf$Negative, f2_neg)
e1 = est.arma.wge(s2, p=7, q=0)
e1
f1 = fore.aruma.wge(fluDf$Positive, phi = e1$phi,  s=52, n.ahead = 45, lastn = TRUE)
#ase1 = mean(((f1$f-fluDf$Positive[135:179])))
#ase1
ase1 = ase(fluDf$Positive, f1)
f1_neg = fore.aruma.wge(fluDf$Negative, phi = c(1.8428774, -0.8968270, -0.6407014,  1.5967127, -1.0525593,  0.1229353), theta = c(0.45129414,  0.24224825, -0.53596162,  0.75762713,  0.08476119), s=52, n.ahead = 45, lastn = TRUE)
#ase2 = mean(((f2$f-fluDf$Negative[135:179])))
ase2 = ase(fluDf$Negative, f1_neg)
f2 = fore.aruma.wge(fluDf$Positive, phi = c(1.76405274, -0.88142813, -0.06765031,  0.17643910,  0.37028688, -0.65347541,  0.23814701), s=26, n.ahead = 13, lastn = TRUE)
#ase1 = mean(((f1$f-fluDf$Positive[154:179])))
ase3 = ase(fluDf$Positive, f2)
f2_neg = fore.aruma.wge(fluDf$Negative, phi = c(1.8428774, -0.8968270, -0.6407014,  1.5967127, -1.0525593,  0.1229353), theta = c(0.45129414,  0.24224825, -0.53596162,  0.75762713,  0.08476119), s=26, n.ahead = 13, lastn = TRUE)
#ase1 = mean(((f2$f-fluDf$Negative[154:179])))
ase4 = ase(fluDf$Negative, f2_neg)
ase1
## Positive ##
s1 = artrans.wge(fluDf$Positive, c(rep(0,1),1))
parzen.wge(s1)
aic5.wge(s1)
plotts.sample.wge(s1)
s2 = artrans.wge(s1, c(rep(0,51),1))
parzen.wge(s2)
aic5.wge(s2)
plotts.sample.wge(s2)
## Negative ##
s3 = artrans.wge(fluDf$Negative, c(rep(0,1),1))
parzen.wge(s3)
aic5.wge(s3)
plotts.sample.wge(s3)
s4 = artrans.wge(s3, c(rep(0,51),1))
parzen.wge(s4)
aic5.wge(s4)
plotts.sample.wge(s4)
e1 = est.arma.wge(s1, p=7, q=0)
e1
mean(fluDf$Positive)
e2 = est.arma.wge(s4, p=6, q=5)
e2
mean(fluDf$Positive)
f1 = fore.aruma.wge(fluDf$Positive, phi = e1$phi,  s=52, n.ahead = 45, lastn = TRUE)
#ase1 = mean(((f1$f-fluDf$Positive[135:179])))
#ase1
ase1 = ase(fluDf$Positive, f1)
f1_neg = fore.aruma.wge(fluDf$Negative, phi = e2$phi, theta = e2$theta, s=52, n.ahead = 45, lastn = TRUE)
#ase2 = mean(((f2$f-fluDf$Negative[135:179])))
ase2 = ase(fluDf$Negative, f1_neg)
f2 = fore.aruma.wge(fluDf$Positive, phi = e1$phi, s=26, n.ahead = 13, lastn = TRUE)
#ase1 = mean(((f1$f-fluDf$Positive[154:179])))
ase3 = ase(fluDf$Positive, f2)
f2_neg = fore.aruma.wge(fluDf$Negative, phi = e2$phi, theta = e2$theta, s=26, n.ahead = 13, lastn = TRUE)
#ase1 = mean(((f2$f-fluDf$Negative[154:179])))
ase4 = ase(fluDf$Negative, f2_neg)
ase3
ase1
be1 = est.ar.wge(fluDf$Positive, p=7, type = 'burg')
be1
mean(fluDf$Positive)
#be2 = est.arma.wge(fluDf$Negative, p=6, q=5, type = 'burg')
#be2
#mean(fluDf$Positive)
be1 = est.ar.wge(s1, p=7, type = 'burg')
be1
mean(fluDf$Positive)
#be2 = est.arma.wge(fluDf$Negative, p=6, q=5, type = 'burg')
#be2
#mean(fluDf$Positive)
bf1 = fore.aruma.wge(fluDf$Positive, phi = be1$phi,  s=52, n.ahead = 45, lastn = TRUE)
ase_bf1 = ase(fluDf$Positive, bf1)
bf2 = fore.aruma.wge(fluDf$Positive, phi = c(1.76613344, -0.88202450, -0.06256226, 0.16666095, 0.38071794, -0.66334254,  0.24216554), s=26, n.ahead = 13, lastn = TRUE)
ase_bf2 = ase(fluDf$Positive, bf2)
be1 = est.ar.wge(fluDf$Positive, p=7, type = 'burg')
be1
mean(fluDf$Positive)
#be2 = est.arma.wge(fluDf$Negative, p=6, q=5, type = 'burg')
#be2
#mean(fluDf$Positive)
bf1 = fore.aruma.wge(fluDf$Positive, phi = be1$phi,  s=52, n.ahead = 45, lastn = TRUE)
ase_bf1 = ase(fluDf$Positive, bf1)
bf2 = fore.aruma.wge(fluDf$Positive, phi = c(1.76613344, -0.88202450, -0.06256226, 0.16666095, 0.38071794, -0.66334254,  0.24216554), s=26, n.ahead = 13, lastn = TRUE)
ase_bf2 = ase(fluDf$Positive, bf2)
bje1 = est.ar.wge(fluDf$Positive, p=7, type = 'yw')
bje1
mean(fluDf$Positive)
bjf1 = fore.aruma.wge(fluDf$Positive, phi = bje1$phi,  s=52, n.ahead = 45, lastn = TRUE)
ase_bjf1 = ase(fluDf$Positive, bjf1)
bjf2 = fore.aruma.wge(fluDf$Positive, phi = bje1$phi, s=26, n.ahead = 13, lastn = TRUE)
ase_bjf2 = ase(fluDf$Positive, bjf2)
flu_train = ts(fluDf$Positive[1:134], start = c(2017,1),frequency = 52)
nonflu_train = ts(fluDf$Negative[1:134], start = c(2017,1),frequency = 52)
set.seed(255)
fit.mlp= mlp(flu_train, lags=1:52, hd.auto.type="cv", hd.max=20, reps=500)
fit.mlp
plot(fit.mlp)
h=45
frc <- forecast(fit.mlp,h=h)
plot(frc)
frc$f <- frc$mean
ase_mlp = ase(flu_train, frc)
#ase_mlp
# Plotting Forecast vs actual for MLP
plot(fluDf$Positive, type = "l",
main='Flu Rates',
xlab="Week"
,ylab="Cases")
lines(seq(134,178,1),frc$mean,col = "blue")
#axis(1, at=1:37, labels=seq(1936,1972,1),las=2)
legend(26, 3, legend=c("MLP Forecast", 'Actual'),
col=c("green", 'black'), lty=1, cex=0.9)
set.seed(255)
fit <- elm(flu_train, difforder=c(1,52), comb= "mean", reps=500, type = "step")
print(fit)
plot(fit)
frc<-forecast(fit,h=45)
frc$f <- frc$mean
ase_elm = ase(flu_train, frc)
#ase_elm
# Plotting Forecast vs actual for ELM
plot(fluDf$Positive, type = "l",
main='Flu Rates',
xlab="Week"
,ylab="Cases")
lines(seq(134,178,1),frc$mean,col = "blue")
#axis(1, at=1:37, labels=seq(1936,1972,1),las=2)
legend(26, 3, legend=c("MLP Forecast", 'Actual'),
col=c("green", 'black'), lty=1, cex=0.9)
set.seed(255)
fit <- elm(flu_train, m=52, difforder=c(1,52), comb= "mean", reps=500, type = "step")
print(fit)
plot(fit)
frc<-forecast(fit,h=45)
frc$f <- frc$mean
ase_elm = ase(flu_train, frc)
#ase_elm
set.seed(255)
fit <- elm(flu_train, m=52, difforder=c(1,52), comb= "mean", reps=500, type = c("lasso", "ridge",
"step", "lm"))
print(fit)
plot(fit)
frc<-forecast(fit,h=45)
frc$f <- frc$mean
ase_elm = ase(flu_train, frc)
#ase_elm
# Plotting Forecast vs actual for ELM
plot(fluDf$Positive, type = "l",
main='Flu Rates',
xlab="Week"
,ylab="Cases")
lines(seq(134,178,1),frc$mean,col = "blue")
#axis(1, at=1:37, labels=seq(1936,1972,1),las=2)
legend(26, 3, legend=c("MLP Forecast", 'Actual'),
col=c("green", 'black'), lty=1, cex=0.9)
flu_train
frc$f
set.seed(255)
fit <- elm(flu_train, m=52, difforder=c(1,52), comb= "mean", reps=500, type = c("lasso", "ridge", "step", "lm"))
print(fit)
plot(fit)
frc<-forecast(fit,h=45)
frc$f <- frc$mean
ase_elm = ase(flu_train, frc)
#ase_elm
kable(frc$f)
library(ggplot2)
library(tswge)
library(ggplot2)
library(ggthemes)
library(forecast)
library(tseries)
library(lubridate)
library(datetime)
library(caret)
library(corrplot)
library(DMwR)
library(Hmisc)
library(ROCR)
library(stringr)
library(RVAideMemoire)
#install.packages("plotly")
library(plotly)
#install.packages('TSstudio')
library(TSstudio)
library(doParallel)
registerDoParallel(cores=16)
library(nnfor)
library(vars)
library(knitr)
library(kableExtra)
install.packages('kableExtra')
library(knitr)
set.seed(255)
fit <- elm(flu_train, m=52, difforder=c(1,52), comb= "mean", reps=500, type = c("lasso", "ridge", "step", "lm"))
print(fit)
plot(fit)
frc<-forecast(fit,h=45)
frc$f <- frc$mean
ase_elm = ase(flu_train, frc)
#ase_elm
kable(frc$f, caption = "Forecasts June 2020 Forward - Weekly")
# Plotting Forecast vs actual for ELM
plot(fluDf$Positive, type = "l",
main='Flu Rates',
xlab="Week"
,ylab="Cases")
lines(seq(134,178,1),frc$mean,col = "blue")
#axis(1, at=1:37, labels=seq(1936,1972,1),las=2)
legend(26, 3, legend=c("MLP Forecast", 'Actual'),
col=c("green", 'black'), lty=1, cex=0.9)
kable(frc$f, caption = "Forecasts June 2020 Forward - Weekly")
# Plotting Forecast vs actual for ELM
plot(fluDf$Positive, type = "l",
main='Flu Rates',
xlab="Week"
,ylab="Cases")
lines(seq(134,178,1),frc$mean,col = "blue")
#axis(1, at=1:37, labels=seq(1936,1972,1),las=2)
legend(26, 3, legend=c("MLP Forecast", 'Actual'),
col=c("green", 'black'), lty=1, cex=0.9)
frc$f%>%
kable() %>%
kable_styling()
dt<-frc$f
kable(dt, caption = "Forecasts June 2020 Forward - Weekly")
# Plotting Forecast vs actual for ELM
plot(fluDf$Positive, type = "l",
main='Flu Rates',
xlab="Week"
,ylab="Cases")
lines(seq(134,178,1),frc$mean,col = "blue")
#axis(1, at=1:37, labels=seq(1936,1972,1),las=2)
legend(26, 3, legend=c("MLP Forecast", 'Actual'),
col=c("green", 'black'), lty=1, cex=0.9)
library(DT)
datatable(frc$f)
dt<-frc$f
datatable(dt)
# Plotting Forecast vs actual for ELM
plot(fluDf$Positive, type = "l",
main='Flu Rates',
xlab="Week"
,ylab="Cases")
lines(seq(134,178,1),frc$mean,col = "blue")
#axis(1, at=1:37, labels=seq(1936,1972,1),las=2)
legend(26, 3, legend=c("MLP Forecast", 'Actual'),
col=c("green", 'black'), lty=1, cex=0.9)
ase_mlp
ase_elm
ase_bf1
ase_bjf1
ase1
ase3
ase_bf2
ase_bjf2
knitr::kable(f1$f)
dt$Cases <-f1$f
dt$Week <- range(1:45)
knitr::kable(f1$f)
knitr::kable(dt)
dt
dt <-f1$f
dt
dt$Week <- range(1:45)
dt
dt$Week <- <- seq.int(nrow(dt))
dt$Week <- seq.int(nrow(dt))
dt
dt <- dataframe(f1$f)
dt <- data.frame(f1$f)
dt$Week <- seq.int(nrow(dt))
dt
dt$Cases <- data.frame(f1$f)
dt$Week <- seq.int(nrow(dt))
dt
dt$Week <- seq.int(nrow(dt))
dt$Cases <- data.frame(f1$f)
dt
knitr::kable(dt)
dt$Week <- data.frame(seq.int(nrow(dt)))
dt$Cases <- f1$f
knitr::kable(dt)
dt$Week <- data.frame(nrow(dt))
dt$Cases <- f1$f
knitr::kable(dt)
dt$Week <- data.frame(nrow(dt))
dt$Week <- data.frame(range(1,45))
dt$Cases <- f1$f
knitr::kable(dt)
dt$Week <- data.frame(range(1,45))
range(1,45)
dt$Week <- data.frame(range(1:45))
range(1:45)
dt$Week <- data.frame(seq(1,45))
dt$Cases <- f1$f
knitr::kable(dt)
f1$f
dt$Week <- data.frame(seq(1,45))
knitr::kable(dt)
dt <- data.frame()
dt$Week <- data.frame(seq(1,45))
dt$Cases <- f1$f
knitr::kable(dt)
dt$Week <- data.frame(seq(1,45))
knitr::kable(dt$Week, dt$Cases)
dt$Week <- data.frame(seq(1,45))
dt<- data.frame(seq(1,45))
dt$Cases <- f1$f
knitr::kable(dt$Week, dt$Cases)
knitr::kable(dt)
dt<- data.frame(seq(1,45))
dt$Cases <- f1$f
colnames(dt)<-c("Week Forecast", "Cases")
knitr::kable(dt)
dt<- data.frame(seq(1,45))
dt$Cases <- f1$f
colnames(dt)<-c("Week Forecast - Starting June 2020", "Cases")
knitr::kable(dt)
